# ref: https://golangci-lint.run/usage/configuration/
run:
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 0

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

# ref: https://golangci-lint.run/usage/linters/
linters:
  # Disable all linters.
  # Default: false
  disable-all: true

  # Enable specific linters
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    # Code correctness
    - errcheck        # Checks for unchecked errors in code
    - errorlint       # Ensures errors are wrapped properly and checked appropriately
    - nilerr          # Finds code that returns nil even if error is not nil
    - nilnil          # Checks that there's no simultaneous return of nil error and invalid value
    - wrapcheck       # Ensures errors returned from external packages are wrapped
    - gosimple        # Simplifies code
    - staticcheck     # Provides advanced static analysis
    - stylecheck      # Enforces style rules
    - govet           # Reports suspicious constructs
    - typecheck       # Parses and type-checks Go code
    - unused          # Checks for unused constants, variables, functions, and types

    # Code security
    - gosec           # Inspects source code for security problems
    - bodyclose       # Checks whether HTTP response body is closed successfully
    - noctx           # Finds HTTP requests without context.Context
    - rowserrcheck    # Checks whether Rows.Err is checked after Rows.Next
    - sqlclosecheck   # Checks that SQL rows and statements are properly closed
    - spancheck       # Checks for mistakes when using OpenTelemetry spans

    # Error handling
    - errchkjson      # Checks types passed to the json encoding functions
    - errname         # Checks that sentinel errors are prefixed with "Err" and error types are suffixed with "Error"

    # Memory management
    - makezero        # Finds slice declarations with non-zero length but zero initial values
    - prealloc        # Finds slice declarations that could potentially be preallocated
    - wastedassign    # Finds wasted assignment statements

    # Code style and formatting
    - gci             # Controls Go package imports order
    - goimports       # Updates imports and formats code like gofmt
    - whitespace      # Checks for unnecessary whitespace
    - wsl             # Enforces empty lines at the right places
    - godot           # Checks if comments end with a period
    - goheader        # Checks the license header existence
    - ireturn         # Checks function return implementations
    - inamedparam     # Checks that interface methods have all parameters named
    - musttag         # Enforces field tags in (un)marshaled structs
    - tagliatelle     # Checks the struct tags case
    - revive          # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - gocritic        # Provides opinionated code analysis

    # Potential bugs
    - asasalint       # Checks for pass []any as any in variadic func(...any)
    - asciicheck      # Checks that your code does not contain non-ASCII identifiers
    - bidichk         # Checks for dangerous unicode character sequences
    - forcetypeassert # Finds forced type assertions
    - dogsled         # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - durationcheck   # Checks for two durations multiplied together
    - goconst         # Finds repeated strings that could be constants
    - gosmopolitan    # Reports certain i18n/l10n code patterns
    - ineffassign     # Detects when assignments to existing variables are not used
    - importas        # Enforces consistent import aliases
    - intrange        # Checks for integer range checks that can be simplified
    - loggercheck     # Checks key-value pairs for common logger libraries
    - mirror          # Reports wrong mirror patterns in regexp
    - nakedret        # Finds naked returns in functions greater than a specified function length
    - nestif          # Reports deeply nested if statements
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port
    - perfsprint      # Checks that fmt.Sprintf can be replaced with a faster alternative
    - predeclared     # Finds code that shadows predeclared identifiers
    - promlinter      # Checks Prometheus metrics naming
    - protogetter     # Ensures protocol buffer fields getters for string and bytes fields are used
    - reassign        # Checks that package variables are not reassigned
    - unconvert       # Removes unnecessary type conversions
    - unparam         # Reports unused function parameters
    - usestdlibvars   # Detects the possibility to use variables from the standard library

    # Go module specific
    - gocheckcompilerdirectives # Checks that go compiler directives are valid
    - gochecknoglobals         # Checks that no global variables exist
    - gochecknoinits           # Checks that no init functions are present
    - gochecksumtype           # Checks that sum types are used appropriately
    - goprintffuncname         # Checks that printf-like functions are named with f at the end
    - forbidigo                # Forbids identifiers
    - grouper                  # Analyzes expression groups

    # Testing specific
    - testableexamples         # Checks testable examples
    - testifylint              # Checks usage of Testify
    - thelper                  # Detects lacking t.Helper() method calls
    - tparallel                # Detects inappropriate usage of t.Parallel() method

    # Meta linting
    - nolintlint               # Reports ill-formed or insufficient nolint directives

# ref: https://golangci-lint.run/usage/linters/
linters-settings:
  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 3
  testifylint:
    # Enable all checkers (https://github.com/Antonboom/testifylint#checkers).
    # Default: false
    enable-all: true

issues:
  exclude-rules:
    # Exclude dupl linter for test files
    - path: '(.+)_test\.go'
      linters:
        - dupl
    - path: 'seeded.go'
      linters:
        - gosec

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 10

  # Maximum number of issues to show.
  # Set to 0 to show all.
  # Default: 50
  max-issues-per-linter: 50
